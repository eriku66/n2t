// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // Operation of x
    Mux16(a=x, b=false, sel=zx, out=ZAppliedX);
    Not16(in=ZAppliedX, out=ZNAppliedX);
    Mux16(a=ZAppliedX, b=ZNAppliedX, sel=nx, out=operatedX);

    // Operations of y
    Mux16(a=y, b=false, sel=zy, out=ZAppliedY);
    Not16(in=ZAppliedY, out=ZNAppliedY);
    Mux16(a=ZAppliedY, b=ZNAppliedY, sel=ny, out=operatedY);

    // Computation of x and y
    Add16(a=operatedX, b=operatedY, out=sumXY);
    And16(a=operatedX, b=operatedY, out=andXY);
    Mux16(a=andXY, b=sumXY, sel=f, out=computationResult);
    Not16(in=computationResult, out=notComputationResult);
    Mux16(a=computationResult, b=notComputationResult, sel=no, out=result);

    And16(a=result, b=true, out=out);

    And16(a=result, b=true, out[0..7]=firstHalfResult, out[8..15]=secondHalfResult);

    // Check if out is zero
    Or8Way(in=firstHalfResult, out=firstHalfOr8Way);
    Or8Way(in=secondHalfResult, out=secondHalfOr8Way);
    Or(a=firstHalfOr8Way, b=secondHalfOr8Way, out=notZero);
    Not(in=notZero, out=zr);

    // Determin the sign
    And16(a=result, b=true, out[15]=ng);
}
